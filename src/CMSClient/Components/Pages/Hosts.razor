@using CMS.Client.Components.Logics
@using Infrastructure.GeneratedAPIs.CMSAPI
@attribute [Route(CMSRoutes.HOSTS)]
@inject NavigationManager NavigationManager


<MudTable T="@TableData"
          Items="@Data"
          Dense="@false"
          Hover="@true"
          Bordered="@true"
          Striped="@true"
          Filter="new Func<TableData, bool>(FilterFunc)"
          OnRowClick="@RowClickEvent"
          @bind-SelectedItem="@selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>DomainAddress</MudTh>
        <MudTh>GeneratedCodesDirectory</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="DomainAddress">@context.DomainAddress</MudTd>
        <MudTd DataLabel="GeneratedCodesDirectory">@context.GeneratedCodesDirectory</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString1 = "";
    private TableData? selectedItem1 = null;
    private HashSet<TableData> selectedItems = new HashSet<TableData>();

    private IEnumerable<TableData> Data = new List<TableData>();

    public Hosts()
    {
        Data = new List<HostVM>()
        {
            new HostVM { Id = Guid.NewGuid(), Title= "Host 1", DomainAddress = "localhost:50124", GeneratedCodesDirectory="./host_1"},
            new HostVM { Id = Guid.NewGuid(), Title= "Host 2", DomainAddress = "localhost:50125", GeneratedCodesDirectory="./host_2"},
            new HostVM { Id = Guid.NewGuid(), Title= "Host 3", DomainAddress = "localhost:50164", GeneratedCodesDirectory="./host_3"}
        }.Select(x => ToData(x));


    }

    private bool FilterFunc(TableData element) => FilterFunc1(element, searchString1);

    private bool FilterFunc1(TableData data, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (data.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (data.DomainAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (data.GeneratedCodesDirectory.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{data.Id}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private TableData ToData(HostVM host)
    {
        return new TableData
        {
            Id = host.Id,
            Title = host.Title,
            DomainAddress = host.DomainAddress,
            GeneratedCodesDirectory = host.GeneratedCodesDirectory,
        };
    }

    private void RowClickEvent(TableRowClickEventArgs<TableData> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo(CMSRoutes.HOSTS + $"{selectedItem1?.Id ?? Guid.Empty}");
    }

    private class TableData
    {
        public Guid Id { get; set; } = Guid.Empty;
        public string Title { get; set; } = string.Empty;
        public string DomainAddress { get; set; } = string.Empty;
        public string GeneratedCodesDirectory { get; set; } = string.Empty;

    }
}