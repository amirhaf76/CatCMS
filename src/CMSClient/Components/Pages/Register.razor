@page "/register"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using CMSClient.Components.Logics
@using CMSClient.Services
@using CMSClient.Services.DTOs
@using Microsoft.AspNetCore.Authorization
@inject UserStatePublisherService StatePublisher;
@inject CustomAuthStateProvider AuthStateProvider;
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Small">
    <MudText Class="pa-4 mx-auto " Typo="Typo.h3">Login</MudText>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4" Elevation="6">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField @bind-Value="@loginVM.Username"
                                  T="string"
                                  Label="Username"
                                  Required="true"
                                  RequiredError="User name is required!" />
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                    <MudTextField @bind-Value="@loginVM.Password"
                                  T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!" />
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))" />
                    <div class="d-flex">
                        <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                            <MudRadio Value="@("Personal")">Personal</MudRadio>
                            <MudRadio Value="@("Professional")">Professional</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4" Elevation="6">
                <MudStack Spacing="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(LoginAsync)">Login</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Default" DropShadow="false" OnClick="@(()=>form.Validate())">Validate</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())">Reset</MudButton>
                    <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full" Elevation="6">
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                    @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;
    LoginVM loginVM = new LoginVM();
    string? message;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AuthenticationStateChangedHandler v = delegate (Task<AuthenticationState> e)
        {
            message = "State is changed";
        };

        AuthStateProvider.AuthenticationStateChanged += v;
    }

    private Task LoginAsync()
    {
        //await StatePublisher.LoginAsync(loginVM);
        var claims = new System.Security.Claims.Claim[2];

        var id = new System.Security.Claims.ClaimsIdentity(claims.AsEnumerable(), "bearer", "Name", "role");
        AuthStateProvider.ChangeAuthenticationState(new System.Security.Claims.ClaimsPrincipal(id));

        return Task.CompletedTask;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1?.Value != arg)
            return "Passwords don't match";
        return string.Empty;
    }

}
